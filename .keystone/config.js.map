{
  "version": 3,
  "sources": ["../keystone.ts", "../schemas/user.ts", "../schemas/product.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\n\nimport User from \"./schemas/user\";\nimport Product from \"./schemas/product\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: \"sqlite\",\n      url: \"file:./keystone.db\",\n    },\n    lists: {\n      User,\n      Product,\n    },\n    session,\n  })\n);\n", "import { list } from \"@keystone-6/core\";\r\nimport {\r\n  text,\r\n  timestamp,\r\n  relationship,\r\n  password,\r\n} from \"@keystone-6/core/fields\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\n\r\nexport default list({\r\n  access: allowAll,\r\n  fields: {\r\n    name: text({ validation: { isRequired: true } }),\r\n\r\n    email: text({\r\n      validation: { isRequired: true },\r\n      isIndexed: \"unique\",\r\n    }),\r\n\r\n    password: password({ validation: { isRequired: true } }),\r\n    products: relationship({ ref: \"Product.seller\", many: true }),\r\n\r\n    createdAt: timestamp({\r\n      defaultValue: { kind: \"now\" },\r\n    }),\r\n  },\r\n});\r\n", "import { list } from \"@keystone-6/core\";\r\nimport {\r\n  text,\r\n  timestamp,\r\n  integer,\r\n  relationship,\r\n} from \"@keystone-6/core/fields\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\n\r\nexport default list({\r\n  access: allowAll,\r\n  fields: {\r\n    name: text({ validation: { isRequired: true } }),\r\n    seller: relationship({\r\n      ref: \"User.products\",\r\n      many: true,\r\n    }),\r\n    price: integer({ validation: { isRequired: true }, defaultValue: 0 }),\r\n    description: text({ validation: { isRequired: true } }),\r\n    quantityInStock: integer({ validation: { isRequired: true } }),\r\n    createdAt: timestamp({ validation: { isRequired: true } }),\r\n  },\r\n  ui: {},\r\n});\r\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,IAAAA,eAAuB;;;ACPvB,kBAAqB;AACrB,oBAKO;AACP,oBAAyB;AAEzB,IAAO,mBAAQ,kBAAK;AAAA,EAClB,QAAQ;AAAA,EACR,QAAQ;AAAA,IACN,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAE/C,WAAO,oBAAK;AAAA,MACV,YAAY,EAAE,YAAY,KAAK;AAAA,MAC/B,WAAW;AAAA,IACb,CAAC;AAAA,IAED,cAAU,wBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACvD,cAAU,4BAAa,EAAE,KAAK,kBAAkB,MAAM,KAAK,CAAC;AAAA,IAE5D,eAAW,yBAAU;AAAA,MACnB,cAAc,EAAE,MAAM,MAAM;AAAA,IAC9B,CAAC;AAAA,EACH;AACF,CAAC;;;AC1BD,IAAAC,eAAqB;AACrB,IAAAC,iBAKO;AACP,IAAAC,iBAAyB;AAEzB,IAAO,sBAAQ,mBAAK;AAAA,EAClB,QAAQ;AAAA,EACR,QAAQ;AAAA,IACN,UAAM,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAC/C,YAAQ,6BAAa;AAAA,MACnB,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,IACD,WAAO,wBAAQ,EAAE,YAAY,EAAE,YAAY,KAAK,GAAG,cAAc,EAAE,CAAC;AAAA,IACpE,iBAAa,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACtD,qBAAiB,wBAAQ,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAC7D,eAAW,0BAAU,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,EAC3D;AAAA,EACA,IAAI,CAAC;AACP,CAAC;;;ACND,oBAA4B;AAC5B,kBAA2B;AAG3B,qBAAkC;AAIlC,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AAC3D,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAChD;AAGA,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC9B,SAAS;AAAA,EACT,eAAe;AAAA;AAAA;AAAA;AAAA,EAKf,aAAa;AAAA,EACb,aAAa;AAAA;AAAA;AAAA,EAIb,eAAe;AAAA;AAAA;AAAA;AAAA,IAIb,QAAQ,CAAC,QAAQ,SAAS,UAAU;AAAA;AAAA;AAAA,EAItC;AACF,CAAC;AAKD,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAGrC,IAAM,cAAU,kCAAkB;AAAA,EAChC,QAAQ;AAAA,EACR,QAAQ;AACV,CAAC;;;AH/CD,IAAO,mBAAQ;AAAA,MACb,qBAAO;AAAA,IACL,IAAI;AAAA;AAAA;AAAA;AAAA,MAIF,UAAU;AAAA,MACV,KAAK;AAAA,IACP;AAAA,IACA,OAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,IACA;AAAA,EACF,CAAC;AACH;",
  "names": ["import_core", "import_core", "import_fields", "import_access"]
}
